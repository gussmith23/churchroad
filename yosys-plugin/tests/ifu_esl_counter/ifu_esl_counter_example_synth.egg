(include "../../../egglog_src/churchroad.egg")

; wire declarations
; $0\count_f[15:0]
(let v0 (Wire "v0" 16))
; $2\count_next[15:0]
(let v1 (Wire "v1" 16))
; $3\count_next[15:0]
(let v2 (Wire "v2" 16))
; $add$ifu_esl_counter.pickle.v:81$4_Y
(let v3 (Wire "v3" 16))
; $procmux$15_Y
(let v4 (Wire "v4" 16))
; $procmux$6_Y
(let v5 (Wire "v5" 16))
; $procmux$9_Y
(let v6 (Wire "v6" 16))
; clear
(let v7 (Wire "v7" 1))
; clk
(let v8 (Wire "v8" 1))
; count_f
(let v9 (Wire "v9" 16))
; count_next
(let v10 (Wire "v10" 16))
; rst_n
(let v11 (Wire "v11" 1))
; sset
(let v12 (Wire "v12" 1))
; step
(let v13 (Wire "v13" 1))

; cells
; 16'0000000000000001
(let v14 (Op0 (BV 1 16)))
(union v3 (Op2 (Add) v9 v14))
; TODO: assuming 0 default for Reg
(union v9 (Op2 (Reg 0) v8 v0))
; 16'x
(let v15 (Op0 (BV 0 16)))
(union v2 (Op3 (Mux) v7 v6 v15))
(union v4 (Op3 (Mux) v12 v2 v14))
(union v1 (Op3 (Mux) v7 v4 v15))
; 16'0000000000000000
(let v16 (Op0 (BV 0 16)))
(union v10 (Op3 (Mux) v7 v1 v16))
(union v0 (Op3 (Mux) v11 v16 v10))
(union v5 (Op3 (Mux) v13 v9 v3))
(union v6 (Op3 (Mux) v12 v5 v15))

; inputs
(let clear (Var "clear" 1))
(IsPort "" "clear" (Input) clear)
(union v7 clear)
(let clk (Var "clk" 1))
(IsPort "" "clk" (Input) clk)
(union v8 clk)
(let rst_n (Var "rst_n" 1))
(IsPort "" "rst_n" (Input) rst_n)
(union v11 rst_n)
(let sset (Var "sset" 1))
(IsPort "" "sset" (Input) sset)
(union v12 sset)
(let step (Var "step" 1))
(IsPort "" "step" (Input) step)
(union v13 step)

; outputs
(let count_f v9)
(IsPort "" "count_f" (Output) count_f)

; delete wire expressions
(delete (Wire "v0" 16))
(delete (Wire "v1" 16))
(delete (Wire "v2" 16))
(delete (Wire "v3" 16))
(delete (Wire "v4" 16))
(delete (Wire "v5" 16))
(delete (Wire "v6" 16))
(delete (Wire "v7" 1))
(delete (Wire "v8" 1))
(delete (Wire "v9" 16))
(delete (Wire "v10" 16))
(delete (Wire "v11" 1))
(delete (Wire "v12" 1))
(delete (Wire "v13" 1))
